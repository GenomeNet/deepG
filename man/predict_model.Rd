% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict_model}
\alias{predict_model}
\title{Make prediction for nucleotide sequence or entries in fasta/fastq file}
\usage{
predict_model(
  output_format = "one_seq",
  model = NULL,
  layer_name = NULL,
  sequence = NULL,
  path_input = NULL,
  round_digits = 2,
  filename = "states.h5",
  step = 1,
  vocabulary = c("a", "c", "g", "t"),
  batch_size = 256,
  verbose = TRUE,
  return_states = FALSE,
  padding = FALSE,
  output_type = "h5",
  path_model = NULL,
  mode = "lm",
  lm_format = "target_right",
  output_dir = NULL,
  format = "fasta",
  include_seq = TRUE,
  reverse_complement_encoding = FALSE
)
}
\arguments{
\item{output_format}{Either \code{"one_seq"}, \code{"by_entry"}, \code{"by_entry_one_file"}, \code{"one_pred_per_entry"}.}

\item{model}{A keras model. If model and path_model are not NULL, model will be used for inference.}

\item{layer_name}{Name of layer to get output from. If \code{NULL}, will use the last layer.}

\item{sequence}{Character string, ignores path_input if argument given.}

\item{path_input}{Path to fasta file.}

\item{round_digits}{Number of decimal places.}

\item{filename}{Filename to store states in. No file output if argument is \code{NULL}.}

\item{step}{Frequency of sampling steps.}

\item{vocabulary}{Vector of allowed characters, character outside vocabulary get encoded as 0-vector.}

\item{batch_size}{Number of samples to evaluate at once. Does not change output, only relevant for speed and memory.}

\item{verbose}{Whether to print model before and after removing layers.}

\item{return_states}{Return predictions as data frame. Only supported for output_format \code{"one_seq"}.}

\item{padding}{Logical scalar, generate states for first maxlen nucleotides by
padding beginning of sequence with 0-vectors.}

\item{output_type}{\code{"h5"} or \code{"csv"}. If \verb{output_format`` is }"by_entries_one_file", "one_pred_per_entry"\verb{can only be}"h5"`.}

\item{path_model}{Path to a pretrained model.}

\item{mode}{Either \code{"lm"} for language model or \code{"label"} for label classification.}

\item{output_dir}{Path to folder, where to write output.}

\item{format}{Either \code{"fasta"} or \code{"fastq"}.}

\item{include_seq}{Whether to include input sequence in h5 file.}
}
\description{
Removes layers (optional) from pretrained model and calculates states of fasta/fastq file or nucleotide sequence.
Writes states to h5/csv file. To access the content of h5 output use \code{load_predictions} function.
\itemize{
\item If \code{"one_seq"} computes prediction for sequence argument or fasta/fastq file.
Combines fasta entries in file to one sequence. This means predictor sequences can contain elements from more than one fasta entry.
\item If \code{"by_entry"} will output a separate file for each fasta/fastq entry.
Names of output files are: output_dir + "Nr" + i + filename + output_type, where i is the number of the fasta entry.
\item If \code{"by_entry_one_file"}, will store prediction for all fasta entry in one h5 file.
\item If \code{"one_pred_per_entry"} will make one prediction for each entry by either picking random sample for long sequences
or pad sequence for short sequences.
}
}
\examples{
# make prediction for single sequence and write to h5 file
model <- create_model_lstm_cnn(maxlen = 20, layer_lstm = 8, layer_dense = 2, verbose = FALSE)
vocabulary <- c("a", "c", "g", "t")
sequence <- paste(sample(vocabulary, 200, replace = TRUE), collapse = "")
output_file <- tempfile(fileext = ".h5")
predict_model(output_format = "one_seq", model = model, step = 10,
             sequence = sequence, filename = output_file, mode = "label")

# make prediction for fasta file with multiple entries, write output to separate h5 files
fasta_path <- tempfile(fileext = ".fasta")
create_dummy_data(file_path = fasta_path, num_files = 1,
                 num_seq = 5, seq_length = 100,
                 write_to_file_path = TRUE)
model <- create_model_lstm_cnn(maxlen = 20, layer_lstm = 8, layer_dense = 2, verbose = FALSE)
output_dir <- tempfile()
dir.create(output_dir)
predict_model(output_format = "by_entry", model = model, step = 10, verbose = FALSE,
               output_dir = output_dir, mode = "label", path_input = fasta_path)
list.files(output_dir)
}
