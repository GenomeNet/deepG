% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/callbacks.R
\name{tensorboard_complete_cb}
\alias{tensorboard_complete_cb}
\title{Tensorboard callback wrapper}
\usage{
tensorboard_complete_cb(
  default_arguments,
  model,
  path_tensorboard,
  run_name,
  train_type,
  path_model,
  path,
  train_val_ratio,
  batch_size,
  epochs,
  max_queue_size,
  lr_plateau_factor,
  patience,
  cooldown,
  steps_per_epoch,
  step,
  shuffle_file_order,
  initial_epoch,
  vocabulary,
  learning_rate,
  shuffle_input,
  vocabulary_label,
  solver,
  file_limit,
  reverse_complement,
  wavenet_format,
  cnn_format,
  create_model_function,
  vocabulary_size,
  gen_cb,
  argumentList,
  maxlen,
  labelGen,
  labelByFolder,
  vocabulary_label_size,
  tb_images = FALSE,
  stateful,
  target_middle,
  num_train_files,
  path_file_log,
  proportion_per_seq,
  skip_amb_nuc,
  max_samples,
  proportion_entries,
  train_with_gen,
  count_files = TRUE
)
}
\arguments{
\item{model}{A keras model.}

\item{path_tensorboard}{Path to path_tensorboard directory or NULL. If NULL, training not tracked on tensorboard.}

\item{run_name}{Name of the run. Name will be used to identify output from callbacks.}

\item{train_type}{Either "lm", "lm_rds" for language model; "label_header", "label_folder", "label_csv", "label_rds" for classification or "dummy_gen".
Language model is trained to predict character in sequence.
"label_header"/"label_folder"/"label_csv" are trained to predict a corresponding class, given a sequence as input. If "label_header", class will be read from fasta headers.
If "label_folder", class will be read from folder, i.e. all files in one folder must belong to the same class.
If "label_csv", targets are read from a csv file. This file should have one column named "file". The targets then correspond to entries in that row (except "file"
column). Example: if we are currently working with a file called "a.fasta", there should be a row in our csv file
   file  |  label_1 | label_2
"a.fasta"     1          8
If "label_rds", generator will iterate over set of .rds files containing each a list of input and target tensors. Not implemented for model
with multiple inputs. If "lm_rds", generator will iterate over set of .rds files and will split tensor according to target_len argument
(targets are last target_len nucleotides of each sequence).
If "dummy_gen", generator creates random data once and repeatedly feeds these to model.}

\item{path}{Path to folder where individual or multiple FASTA or FASTQ files are located for training. If \code{train_type} is \code{label_folder}, should be a vector or list
where each entry corresponds to a class. If \code{train_type} is not \code{label_folder}, can be a list of directories and/or single files.}

\item{train_val_ratio}{For generator, defines the fraction of batches that will be used for validation (compared to size of training data), i.e. one validtion iteration
processes \code{batch_size} x \code{steps_per_epoch} x \code{train_val_ratio} samples. If you use dataset instead of generator and \code{dataset_val} is NULL, splits \code{dataset}
into train/validation data.}

\item{batch_size}{Number of samples used for one network update.}

\item{epochs}{Number of iterations.}

\item{max_queue_size}{Queue on fit_generator().}

\item{lr_plateau_factor}{Factor of decreasing learning_rate when plateau is reached.}

\item{patience}{Number of epochs waiting for decrease in val_loss before reducing learning_rate.}

\item{cooldown}{Number of epochs without changing learning_rate.}

\item{steps_per_epoch}{Number of training batches per epoch.}

\item{step}{Frequency of sampling steps.}

\item{shuffle_file_order}{Boolean, whether to go through files sequentially or shuffle beforehand.}

\item{initial_epoch}{Epoch at which to start training. Note that network
will run for (\code{epochs} - \code{initial_epochs}) rounds and not \code{epochs} rounds.}

\item{vocabulary}{Vector of allowed characters. Character outside vocabulary get encoded as specified in \code{ambiguous_nuc}.}

\item{shuffle_input}{Boolean, shuffle entries in file.}

\item{vocabulary_label}{Character vector of possible targets. Targets outside \code{vocabulary_label} will get discarded if
\code{train_type = "label_header"}.}

\item{file_limit}{Use only specified number of files, ignored if greater than number of files in \code{path}.}

\item{reverse_complement}{Logical, for every new file decide randomly to use original data or its reverse complement.}

\item{tb_images}{Boolean, whether to show plots in tensorboard.}

\item{path_file_log}{Write name of files used for training to csv file if path is specified.}

\item{proportion_per_seq}{Numerical value between 0 and 1. Proportion of possible samples to take from one file. Takes samples from random subsequence.}

\item{skip_amb_nuc}{Threshold of ambiguous nucleotides to accept in fasta entry. Complete entry will get discarded otherwise.}

\item{max_samples}{Maximum number of samples to use from one file. If not NULL and file has more than \code{max_samples} samples, will randomly choose a
subset of \code{max_samples} samples.}

\item{proportion_entries}{Proportion of fasta entries to keep. For example, if fasta file has 50 entries and proportion_entries = 0.1,
will randomly select 5 entries.}
}
\description{
Tensorboard callback wrapper
}
