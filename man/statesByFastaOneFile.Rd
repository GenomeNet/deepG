% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inference.R
\name{statesByFastaOneFile}
\alias{statesByFastaOneFile}
\title{Write states to h5 file}
\usage{
statesByFastaOneFile(
  model.path,
  layer.depth = NULL,
  fasta.path,
  round_digits = 2,
  h5.filename = "states.h5",
  step = 1,
  vocabulary = c("a", "c", "g", "t"),
  batch.size = 256,
  layer_name = NULL,
  padding = FALSE,
  verbose = TRUE,
  model = NULL,
  mode = "lm",
  target_middle = FALSE,
  format = "fasta"
)
}
\arguments{
\item{model.path}{Path to a pretrained model.}

\item{layer.depth}{Depth of layer to evaluate. If NULL last layer is used.}

\item{fasta.path}{Path to fasta file.}

\item{round_digits}{Number of decimal places.}

\item{h5.filename}{Filename of h5 file to store states.}

\item{step}{Frequency of sampling steps.}

\item{vocabulary}{Vector of allowed characters, character outside vocabulary get encoded as 0-vector.}

\item{batch.size}{Number of samples to evaluate at once. Does not change output, only relevant for speed and memory.}

\item{layer_name}{Name of layer to get output from.}

\item{padding}{Logical scalar, generate states for first maxlen nucleotides by
padding beginning of sequence with 0-vectors.}

\item{verbose}{Whether to print model before and after removing layers.}

\item{model}{A keras model. If model and model.path are not NULL, model will be used for inference.}

\item{mode}{Either "lm" for language model or "label" for label classification.}

\item{target_middle}{Whether target to predict is in middle of sequence.}

\item{format}{Either "fasta" or "fastq".}
}
\description{
\code{writeStatesByFastaEntries} Removes layers (optional) from pretrained model and calculates states of fasta file,
writes separate states matrix in one .h5 file for every fasta entry. 
h5 file also contains the nucleotide sequences and positions of targets corresponding to states.         

To acces the content of h5 file: 
h5_path <- "/path/to/file"
h5_file <- hdf5r::H5File$new(h5_path, mode = "r")
a <- h5_file[["states"]]
# shows header names
# names(a)
b <- a[["someHeaderName"]]
#shows state matrix 
head(b[,])
# get correspondig sequence
hdf5r::h5attr(b, "sequence")
#show corresponding positions 
#hdf5r::h5attr(b, "target_positions") # for language model
#hdf5r::h5attr(b, "sample_end_position") # for label classification
h5_file$close_all()
}
