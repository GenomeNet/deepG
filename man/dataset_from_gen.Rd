% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generators.R
\name{dataset_from_gen}
\alias{dataset_from_gen}
\title{Collect samples from generator and store in rds or pickle file.}
\usage{
dataset_from_gen(
  output_path,
  iterations = 10,
  train_type = "lm",
  output_format = "target_right",
  path_corpus,
  batch_size = 32,
  maxlen = 250,
  step = NULL,
  vocabulary = c("a", "c", "g", "t"),
  as_numpy_array = FALSE,
  shuffle = FALSE,
  set_learning = NULL,
  seed = NULL,
  random_sampling,
  file_name_start = "batch_",
  ...
)
}
\arguments{
\item{output_path}{Output directory. Output files will be named output_path + file_name_start + x + ".rds" or ".pickle", where x is an index (from 1 to
\code{iterations}) and file ending depends on \code{as_numpy_array} argument.}

\item{output_format}{Determines shape of output tensor for language model.
Either \code{"target_right"}, \code{"target_middle_lstm"}, \code{"target_middle_cnn"} or \code{"wavenet"}.
Assume a sequence \code{"AACCGTA"}. Output correspond as follows
\itemize{
\item \verb{"target_right": X = "AACCGT", Y = "A"}
\item \verb{"target_middle_lstm": X = (X_1 = "AAC", X_2 = "ATG"), Y = "C"} (note reversed order of X_2)
\item \verb{"target_middle_cnn": X = "AACGTA", Y = "C"}
\item \verb{"wavenet": X = "AACCGT", Y = "ACCGTA"}
}}

\item{path_corpus}{Input directory where .fasta files are located or path to single file ending with .fasta or .fastq
(as specified in format argument). Can also be a list of directories and/or files.}

\item{batch_size}{Number of batches.}

\item{maxlen}{Length of predictor sequence.}

\item{step}{How often to take a sample.}

\item{vocabulary}{Vector of allowed characters, character outside vocabulary get encoded as 0-vector.}

\item{as_numpy_array}{Store output as list of numpy arrays if TRUE (otherwise as R array).}

\item{shuffle}{Whether to shuffle samples within each batch.}

\item{set_learning}{When you want to assign one label to set of samples. Only implemented for \code{train_type = "label_folder"}.
Input is a list with the following parameters
\itemize{
\item \code{samples_per_target}: how many samples to use for one target
\item \code{maxlen}: length of one sample
\item \code{reshape_mode}: \verb{"time_dist", "multi_input"} or \code{"concat"}.
\itemize{
\item
If \code{reshape_mode} is \code{"multi_input"}, generator will produce \code{samples_per_target} separate inputs, each of length \code{maxlen} (model should have
\code{samples_per_target} input layers).
\item If reshape_mode is \code{"time_dist"}, generator will produce a 4D input array. The dimensions correspond to
\verb{(batch_size, samples_per_target, maxlen, length(vocabulary))}.
\item If reshape mode is \code{"concat"}, generator will concatenate \code{samples_per_target} sequences
of length \code{maxlen} to one long sequence
}
\item If \code{reshape_mode} is \code{"concat"}, there is an additional \code{buffer_len}
argmument. If \code{buffer_len} is an integer, the subsequences are interspaced with \code{buffer_len} rows. The input length is
(\code{maxlen} \eqn{*} \code{samples_per_target}) + \code{buffer_len} \eqn{*} (\code{samples_per_target} - 1)
}}

\item{seed}{Sets seed for set.seed function, for reproducible results when using \code{shuffle_file_order} or \code{shuffle_input}}

\item{file_name_start}{Start of output file names.}

\item{...}{further generator options.}
}
\description{
Repeatedly generate samples with data generator and store output. Creates a separate rds or pickle file in \code{output_path} for each
batch.
}
